{"version":3,"sources":["components/MatchCard/MatchCard.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","index.js"],"names":["MatchCard","props","onClick","setClicked","id","className","alt","name","src","image","Wrapper","children","Title","correctGuesses","bestScore","clickMessage","App","state","matches","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","a","b","Math","random","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"unCAYeA,G,MATG,SAAAC,GAAK,OAEpB,yBAAKC,QAAS,kBAAMD,EAAME,WAAWF,EAAMG,KAAKC,UAAU,iBACzD,yBAAKA,UAAU,iBACd,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCFvBC,G,MAFC,SAAAT,GAAK,OAAI,yBAAKI,UAAU,WAAWJ,EAAMU,YCE1CC,G,MAFD,SAAAX,GAAK,OAAI,wBAAII,UAAU,SAASJ,EAAMU,Y,OCIhDE,G,MAAiB,GACjBC,EAAY,EACZC,EAAe,oFAyHJC,E,2MApHXC,MAAQ,CACJC,UACAL,iBACAC,YACAC,gB,EAGJZ,WAAa,SAAAC,GAGT,IAAMc,EAAU,EAAKD,MAAMC,QAGrBC,EAAeD,EAAQE,QAAO,SAAAC,GAAK,OAAIA,EAAMjB,KAAOA,KAI1D,GAAIe,EAAa,GAAGG,QAAQ,CAExBC,QAAQC,IAAK,oBAAsBX,GACnCU,QAAQC,IAAK,eAAiBV,GAE9BD,EAAiB,EACjBE,EAAe,2CAEf,IAAK,IAAIU,EAAI,EAAIA,EAAIP,EAAQQ,OAASD,IAClCP,EAAQO,GAAGH,SAAU,EAGzB,EAAKK,SAAS,CAACZ,iBACf,EAAKY,SAAS,CAAEd,mBAChB,EAAKc,SAAS,CAACT,iBAGZ,GAAIL,EAAiB,GAGxBM,EAAa,GAAGG,SAAU,EAG1BT,IAEAE,EAAe,wDAEXF,EAAiBC,IACjBA,EAAYD,EACZ,EAAKc,SAAS,CAAEb,eAIpBI,EAAQU,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAG9C,EAAKL,SAAS,CAAET,YAChB,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,qBACZ,CAGHI,EAAa,GAAGG,SAAU,EAG1BT,EAAiB,EAGjBE,EAAe,uEACfD,EAAY,GACZ,EAAKa,SAAS,CAAEb,cAEhB,IAAK,IAAIW,EAAI,EAAIA,EAAIP,EAAQQ,OAASD,IAClCP,EAAQO,GAAGH,SAAU,EAIzBJ,EAAQU,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAG9C,EAAKL,SAAS,CAAET,YAChB,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,mB,wEAKb,IAAD,OACL,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,kCAEA,wBAAIV,UAAU,gBACT4B,KAAKhB,MAAMF,cAGhB,wBAAIV,UAAU,4BAAd,oBACsB4B,KAAKhB,MAAMJ,eAC7B,6BAFJ,eAGiBoB,KAAKhB,MAAMH,WAE5B,yBAAKT,UAAU,aACf,yBAAKA,UAAU,OACd4B,KAAKhB,MAAMC,QAAQgB,KAAI,SAAAb,GAAK,OACzB,kBAAC,EAAD,CACIlB,WAAY,EAAKA,WACjBC,GAAIiB,EAAMjB,GACV+B,IAAKd,EAAMjB,GACXK,MAAOY,EAAMZ,kB,GA5GnB2B,aCLlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.956a14a4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./MatchCard.css\";\n\nconst MatchCard = props => (\n\n\t\t\t<div onClick={() => props.setClicked(props.id)} className=\"card col-md-3\">\n\t\t\t\t<div className=\"img-container\">\n\t\t\t\t\t<img alt={props.name} src={props.image} />\n\t\t\t\t</div>\n\t\t\t</div>\n);\n\nexport default MatchCard;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;","import React, { Component } from \"react\";\nimport MatchCard from \"./components/MatchCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport matches from \"./matchcards.json\";\nimport \"./App.css\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Click on a movie poster to gain points! Click on the same one twice and you lose!\";\n\nclass App extends Component {\n    \n    // Setting this.state.matches to the matches json array\n    state = {\n        matches,\n        correctGuesses,\n        bestScore,\n        clickMessage\n    };\n\n    setClicked = id => {\n\n        // Make a copy of the state matches array to work with\n        const matches = this.state.matches;\n\n        // Filter for the clicked match\n        const clickedMatch = matches.filter(match => match.id === id);\n\n        // If the matched image's clicked value is already true, \n        // do the game over actions\n        if (clickedMatch[0].clicked){\n\n            console.log (\"Correct Guesses: \" + correctGuesses);\n            console.log (\"Best Score: \" + bestScore);\n\n            correctGuesses = 0;\n            clickMessage = \"Bummer! You already clicked on this one.\"\n\n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            this.setState({clickMessage});\n            this.setState({ correctGuesses });\n            this.setState({matches});\n\n        // Otherwise, if clicked = false, and the user hasn't finished\n        } else if (correctGuesses < 11) {\n\n            // Set its value to true\n            clickedMatch[0].clicked = true;\n\n            // increment the appropriate counter\n            correctGuesses++;\n            \n            clickMessage = \"Great! You haven't click on that one yet! Keep going!\";\n\n            if (correctGuesses > bestScore){\n                bestScore = correctGuesses;\n                this.setState({ bestScore });\n            }\n\n            // Shuffle the array to be rendered in a random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n        } else {\n\n            // Set its value to true\n            clickedMatch[0].clicked = true;\n\n            // restart the guess counter\n            correctGuesses = 0;\n\n            // Egg on the user to play again\n            clickMessage = \"WOW!!! You got ALL of them!!! Now, let's see if you can do it again!\";\n            bestScore = 12;\n            this.setState({ bestScore });\n            \n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            // Shuffle the array to be rendered in a random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n\n        }\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <Title>Clickity Clack Movie Game</Title>\n        \n                <h3 className=\"scoreSummary\">\n                    {this.state.clickMessage}\n                </h3>\n                \n                <h3 className=\"scoreSummary card-header\">\n                    Correct Guesses: {this.state.correctGuesses} \n                    <br />\n                    Best Score: {this.state.bestScore} \n                </h3>\n                <div className=\"container\">\n                <div className=\"row\">\n                {this.state.matches.map(match => (\n                    <MatchCard\n                        setClicked={this.setClicked}\n                        id={match.id}\n                        key={match.id}\n                        image={match.image}\n                    />\n                ))}\n                </div>\n                </div>\n\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}